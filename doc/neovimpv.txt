*neovimpv.txt*					        Mpv client for Neovim.

================================================================================
INTRODUCTION                                            *neovimpv-introduction*

Adds commands for launching mpv from Neovim.

To start, type a path to a file you to play in a buffer:

  `~/Music/some_file.mp3`

Then, with the cursor on the same line as the text, use `:MpvOpen` to start
ing the file in an mpv instance. Mpv instances are launched in
`--no-video` mode and render as extmarks at the end of the line. By default,
the current pause state, playback position, duration, and loop count are
displayed. Both the display format and the highlights used to color the extmark
are configurable (see |neovimpv-configuration|).

  `~/Music/some_file.mp3 [ || 0:00 / 2:00  ]`

Further interactions with an mpv instance can be done by placing the cursor on
the same line as a running instance and typing a |neovimpv-command|, or by
using the omnikey (see |neovimpv-keys|). When the mpv instance is closed, the
extmark will be destroyed.

--------------------------------------------------------------------------------
COMMANDS                                                *neovimpv-command*

:MpvOpen [{mpv-args}]                                   *MpvOpen*

        Open an mpv instance using the string on the current line, as if
        invoking `mpv` from the command line with the `--no-video` flag. URLs
        may be used if youtube-dl or yt-dlp has been set up.

        To decrease reliance on IPC, some rudimentary checks are performed to
        ensure that the file exists or is a URL. 

        Optionally {mpv-args} may be given, which are passed as command line
        arguments. This can be used to override `--no-video`, for example, by
        calling `:MpvOpen --video=auto`

        If {mpv-args} overrides the default `--no-video` flag (i.e., if a
        window is anticipated to open), the media data will NOT be rendered in
        an extmark.

:MpvClose [all]                                         *MpvClose*

        Close an mpv instance displayed on the current line.

        If [all] is specified, every mpv instance bound to the current buffer
        is closed.

:MpvSend {command-name} [{...command-args}]             *MpvSend*

        Send a command to the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#json-ipc) part of the mpv
        documentation for more information about commands.

        Some example commands include `seek {seconds}` and `quit`.

:MpvSetProperty {property-name} {property-value}        *MpvSetProperty*
        
        Set a property on the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#property-list) part of the mpv
        documentation for more information about properties.

        {property-value} is evaluated to its JSON value prior to being
        reserialized and sent to mpv. For example, the literal `60` will send
        a number, while `"60"` and `foo` will send strings.

        Some useful example properties:

        [volume]:               Percentage volume, ranging from 0-100.
        [loop]:                 Number of times the content should loop. Valid
                                values include numbers, `"none"`, and `"inf"`.
        [playback-time]:        Current playback position. You can change this
                                relatively using the `seek` command.

        This command is equivalent to using MpvSend with first argument
        `set_property`.

:MpvPause [all]                                         *MpvPause*

        Toggle the pause status of the mpv instance running on the current line.

        If [all] is specified, every mpv instance bound to the current buffer
        is paused (NOT toggled).

        This command is equivalent to
        `:MpvSend set_property pause <not pause state>`

:MpvYoutubeSearch {query}                               *MpvPause*

        Do a YouTube search for {query}, then open a split containing the
        results. See |neovimpv-youtube-splits| for info.

--------------------------------------------------------------------------------
KEYS                                                    *neovimpv-keys*

<Plug>(mpv_omnikey)

        Capture a keypress and send it to the mpv instance running on the
        current line. If there is no instance, |g:mpv_omni_open_new_if_empty|
        decides whether or not to call |:MpvOpen| or report an error.

<Plug>(mpv_youtube_prompt)

        Open a prompt for a YouTube search. This is equivalent to using the
        command |:MpvYoutubeSearch| with the on the contents of the prompt.
        See also |neovimpv-youtube-splits|

--------------------------------------------------------------------------------
YOUTUBE RESULTS                                         *neovimpv-youtube-splits*

While specifying content with 'ytdl://ytsearch:' is possible, the results you
get are more or less a guessing game. Worse still, getting video attributes
(like description, title, view count) with `youtube-dl` (and its forks) is
generally very slow with multiple prompts.

To alleviate these problems, the plugin includes YouTube searching built-in.
The command |:MpvYoutubeSearch| and the key `<Plug>(mpv_youtube_prompt)` allow
you to open a split which contains the results of a YouTube search.

The name of the YouTube video is displayed on each line, with additional video
information available by moving the cursor to that line.

YouTube results requires `lxml` to be available to Python. Videos cannot be
played if `youtube-dl` or a replacement is not available to mpv.

                                                        *neovimpv-youtube-keys*
The keys available in YouTube splits are:

<enter>                 Copy the video URL into the buffer the split was
                        originally opened from and open the video using
                        |:MpvOpen|.

<s-enter> v             Same as <enter>, but calls |:MpvOpen| with
                        `--video=auto` instead, which opens the result with
                        video rather than audio only.

{yank-motion}           If the yank motion is a single line, then the result's
                        video URL is pasted into the register that was used.
                        For example, to copy the result into the system
                        clipboard, using `"+yy` will grab the URL, rather than
                        the line content.

i                       Download the thumbnail of the video and display it with
                        the default system viewer.

q                       Exit the split.

--------------------------------------------------------------------------------
FUNCTIONS                                               *neovimpv-function*

MpvSendNvimKeys({extmark_id}, {keypress_string})        *MpvSendNvimKeys()*

        Send {keypress_string}, a string signifying a nvim keypress event, to
        the mpv instance identified by {extmark_id}.

        The plugin is able to translate SOME of these into mpv equivalents,
        but not all. You should not rely on proper handling of modifier keys
        (Ctrl, Alt, Shift, Super).

--------------------------------------------------------------------------------
CONFIGURATION                                           *neovimpv-configuration*

The following global variables may be placed in your vim init script. If they
are changed while neovim is running, they will NOT take effect.

g:mpv_loading                                           *g:mpv_loading*

        String to be displayed while an mpv instance is still loading. Uses
        the default highlight defined in |g:mpv_default_highlight|.

        The default value is `"[ ... ]"`

g:mpv_format                                            *g:mpv_format*

        Format string to use when drawing text for an mpv instance. Each
        field which is intended to represent an mpv property must be
        surrounded by curly braces ({}). 

        Some formats are drawn internally to the plugin:
            `duration` and `playback-time` will both render in a familiar time
            format, and will be |highlight|ed as `"Conceal"` by default.

            `pause` will render using typical pause and play symbols, instead of
            the string representations "True" and "False". It also uses the
            |highlight|s `"Conceal"` and `"Title"` when `True` and `False`,
            respectively.

        The default value is `"[ {pause} {playback-time} / {duration} {loop} ]"`

g:mpv_style                                             *g:mpv_style*

        Style to use when drawing pictographic fields. Possible values are
        `"unicode"`, `"ligature"`, and `"emoji"`.

        Currently, the only pictographic field is "pause".

        The default value is `"unicode"`

g:mpv_markdown_writable                                 *g:mpv_markdown_writable*

        List of |filetype|s which, when a line is opened using |:MpvOpen|,
        will format the line into markdown, if it isn't already. The format
        used is `[{mpv-title}]({original-link})`.

        This option is best used in files which support syntax that conceals
        link contents.

g:mpv_default_args                                      *g:mpv_default_args*

        List of arguments to be supplied to mpv when an instance is opened
        with |:MpvOpen|. Note that `--no-video` is always implied, unless it
        is overridden by `--video=auto`.

g:mpv_property_thresholds                               *g:mpv_property_thresholds*

        Dictionary where the keys are mpv properties. The values are lists of
        numbers which control which highlight will be used when rendering the
        property.

        If the list contains one entry, the highlight is partitioned into "Low"
        and "High", which are appended to the usual name (e.g., "MpvPlaybackTime"
        becomes "MpvPlaybackTimeLow" and "...High"). Values less than the entry
        are given "Low" while values greater than it are given "High".

        If the list contains two entries, the value is partitioned into "Low", 
        "Middle", and "High" instead.

--------------------------------------------------------------------------------
HIGHLIGHTS                                              *neovimpv-highlights*

The highlight used to draw an mpv property is user-controllable. All
highlights begin with "Mpv", followed by the property name. Properties in mpv
are given in kebab-case, but the corresponding highlights in Vim will be in
CamelCase. For example, the property "playback-time" becomes the highlight
"MpvPlaybackTime".

All properties which occur in `g:mpv_format` are given highlights that link
to bound to the plugin default highlight `MpvDefault`, unless they have
already been defaulted in the plugin. The following defaults additional
defaults exist:

- MpvPauseTrue -> Conceal
- MpvPauseFalse -> Title
- MpvPlaybackTime -> Conceal
- MpvDuration -> Conceal

When using |g:mpv_property_thresholds|, the original highlight for the
property will not be used. Instead, only the partitioned highlights will exist
(with defaults appropriately defined).

For example, the following will cause the first 10 seconds of playback time to
be drawn with the highlight "ErrorMsg", while the remaining time will be drawn
with "MpvDefault" (instead of "MpvPlaybackTime"):

  `let g:mpv_property_thresholds = { "playback-time": [10] }`
  `hi! link MpvPlaybackTimeLow ErrorMsg`

The following highlights are used for extra video info in YouTube results:

| PROPERTY NAME | HIGHLIGHT NAME        | EXPLANATION
_______________________________________________________________________
| length        | MpvYoutubeLength      | Length of the video
| channel_name  | MpvYoutubeChannelName | Channel name of uploader
| views         | MpvYoutubeViews       | View count of the video

================================================================================
vim:tw=80:nosta:ft=help:fen:
