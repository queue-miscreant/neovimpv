*neovimpv.txt*					        Mpv client for Neovim.

================================================================================
INTRODUCTION                                            *neovimpv-introduction*

Adds commands for launching mpv from Neovim.

To start, type a path to a file you to play in a buffer:

  `~/Music/some_file.mp3`

Then, with the cursor on the same line as the text, use `:MpvOpen` to start
ing the file in an mpv instance. Mpv instances are launched in
`--no-video` mode and render as extmarks at the end of the line. By default,
the current pause state, playback position, duration, and loop count are
displayed. Both the display format and the highlights used to color the extmark
are configurable (see |neovimpv-configuration|).

  `~/Music/some_file.mp3 [ || 0:00 / 2:00  ]`

Further interactions with an mpv instance can be done by placing the cursor on
the same line as a running instance and typing a |neovimpv-command|. When the
mpv instance is closed, the extmark will be destroyed.

--------------------------------------------------------------------------------
COMMANDS                                                *neovimpv-command*

:MpvOpen [{mpv-args}]

        Open an mpv instance using the string on the current line, as if
        invoking `mpv` from the command line with the `--no-video` flag. URLs
        may be used if youtube-dl or yt-dlp has been set up.

        Optionally {mpv-args} may be given, which are passed as command line
        arguments. This can be used to override `--no-video`, for example, by
        calling `:MpvOpen --video=auto`

:MpvClose [all]

        Close an mpv instance displayed on the current line.

        If `all` is specified, every mpv instance bound to the current buffer
        is closed.

:MpvSend {command-name} [{...command-args}]

        Send a command to the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#json-ipc) part of the mpv
        documentation for more information about commands.

        Some example commands include `seek {seconds}` and `quit`.

:MpvSetProperty {property-name} {property-value}
        
        Set a property on the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#property-list) part of the mpv
        documentation for more information about properties.

        {property-value} is evaluated to its JSON value prior to being
        reserialized and sent to mpv. For example, the literal `60` will send
        a number, while `"60"` and `foo` will send strings.

        Some useful example properties:

        [volume]:               Percentage volume, ranging from 0-100.
        [loop]:                 Number of times the content should loop. Valid
                                values include numbers, `"none"`, and `"inf"`.
        [playback-time]:        Current playback position. You can change this
                                relatively using the `seek` command.

        This command is equivalent to using MpvSend with first argument
        `set_property`.

:MpvPause [all]

        Toggle the pause status of the mpv instance running on the current line.

        If `all` is specified, every mpv instance bound to the current buffer
        is paused (NOT toggled).

        This command is equivalent to
        `:MpvSend set_property pause <not pause state>`

--------------------------------------------------------------------------------
CONFIGURATION                                           *neovimpv-configuration*

The following global variables may be placed in your vim init script. If they
are changed while neovim is running, they will NOT take effect.

g:mpv_default_highlight                                 *g:mpv_default_highlight*

        Name of |highlight| to be used by default when drawing text for the mpv
        instance.

        The default value is `"LineNr"`.

g:mpv_loading                                           *g:mpv_loading*

        String to be displayed while an mpv instance is still loading. Uses
        the default highlight defined in |g:mpv_default_highlight|.

        The default value is `"[ ... ]"`

g:mpv_format                                            *g:mpv_format*

        Format string to use when drawing text for an mpv instance. Each
        field which is intended to represent an mpv property must be
        surrounded by curly braces ({}). 

        Some formats are drawn internally to the plugin:
            `duration` and `playback-time` will both render in a familiar time
            format, and will be |highlight|ed as `"Conceal"` by default.

            `pause` will render using typical pause and play symbols, instead of
            the string representations "True" and "False". It also uses the
            |highlight|s `"Conceal"` and `"Title"` when `True` and `False`,
            respectively.

        The default value is `"[ {pause} {playback-time} / {duration} {loop} ]"`

g:mpv_style                                             *g:mpv_style*

        Style to use when drawing pictographic fields. Possible values are
        `"unicode"`, `"ligature"`, and `"emoji"`.

        Currently, the only pictographic field is "pause".

        The default value is `"unicode"`

g:mpv_highlights                                        *g:mpv_highlights*

        Dictionary of additional highlights which will be used when rendering
        the contents of |g:mpv_format|. These values will override the
        default |highlight|s mentioned there.

        The keys in this dictionary should be mpv property names and the
        values should be valid highlight names.

        To use a different highlight for properties with a certain (discrete)
        value, you may also specify a key as `{mpv-property}@value`. The value
        will be evaluated as a JSON before being compared to its actual value.

g:mpv_markdown_writable                                 *g:mpv_markdown_writable*

        List of |filetype|s which, when a line is opened using |:MpvOpen|,
        will format the line into markdown, if it isn't already. The format
        used is `[{mpv-title}]({original-link})`.

        This option is best used in files which support syntax that hides link
        contents.

g:mpv_default_args                                      *g:mpv_markdown_writable*

        List of arguments to be supplied to mpv when an instance is opened
        with |:MpvOpen|. Note that `--no-video` is always implied, unless it
        is overridden by `--video=auto`.

================================================================================
vim:tw=80:nosta:ft=help:fen:
