*neovimpv.txt*					        Mpv client for Neovim.

================================================================================
INTRODUCTION                                            *neovimpv-introduction*

Adds commands for launching mpv from Neovim.

To start, type a path to a file you to play in a buffer:

  `~/Music/some_file.mp3`

Then, with the cursor on the same line as the text, use `:MpvOpen` to start
ing the file in an mpv instance. Mpv instances are launched in
`--no-video` mode and render as extmarks at the end of the line. By default,
the current pause state, playback position, duration, and loop count are
displayed. Both the display format and the highlights used to color the extmark
are configurable (see |neovimpv-configuration|).

  `~/Music/some_file.mp3 [ || 0:00 / 2:00  ]`

Further interactions with an mpv instance can be done by placing the cursor on
the same line as a running instance and typing a |neovimpv-command|, or by
using the omnikey (see |neovimpv-keys|). When the mpv instance is closed, the
extmark will be destroyed.

                                                        *neovimpv-playlist*

Opening multiple lines of text will queue each line which contains a valid
file name (or appears to contain a valid URL) in an mpv playlist. The player
extmark will follow the current playlist item.

If lines are deleted from the playlist, the item is removed from the mpv
playlist, and its corresponding extmark is deleted. Undoing will not restore
the playlist or extmark. Line contents are NOT tracked, and the file opened
will correspond to the contents of the line at the time mpv was opened.

--------------------------------------------------------------------------------
COMMANDS                                                *neovimpv-command*

:MpvOpen [{mpv-args}]                                   *MpvOpen*
:MpvOpen [{local-args} -- {mpv-args}]

        Open an mpv instance using the string on the current line, as if
        invoking `mpv` from the command line with the `--no-video` flag. URLs
        may be used if youtube-dl or yt-dlp has been set up.

        To decrease reliance on IPC, some rudimentary checks are performed to
        ensure that the file exists or is a URL.

        A range can also be passed, in which case the lines are opened as a
        playlist (see |neovimpv-playlist|).

        Optionally {mpv-args} may be given, which are passed as command line
        arguments. This can be used to override `--no-video`, for example, by
        calling `:MpvOpen --video=auto`

        If {mpv-args} overrides the default `--no-video` flag (i.e., if a
        window is anticipated to open), the media data will NOT be rendered in
        an extmark.

        {local-args}, if given (by placing them before a `--` in the command),
        apply local settings to the plugin mpv handler. They include

        `video`                 Will open the buffer as a video. Same as
                              supplying `--video=auto`.
        `stay`                  Override |g:mpv_on_playlist_update| to `stay`
                              for this player.
        `paste`                 Override |g:mpv_on_playlist_update| to `paste`
                              for this player.
        `new`                   Override |g:mpv_on_playlist_update| to `new_one`
                              for this player. If the initial playlist is
                              longer than one entry, an error is thrown.

:MpvClose [{buffer}]                                    *MpvClose*

        Close an mpv instance displayed on the current line.

        If {buffer} is specified and a number, it closes all mpvs which were
        bound to that buffer number. `0` signifies the current buffer.
        {buffer} can also be `all`, in which case all known mpv instances are
        closed.

:MpvPause [{buffer}]                                    *MpvPause*

        Toggle the pause status of the mpv instance running on the current line.

        If {buffer} is specified and a number, it pauses (NOT toggles) all mpvs
        which were bound to that buffer number. `0` signifies the current
        buffer.
        {buffer} can also be `all`, in which case all known mpv instances are
        paused.

        This command is equivalent to
        `:MpvSend set_property pause <not pause state>`

:MpvSend {command-name} [{...command-args}]             *MpvSend*

        Send a command to the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#json-ipc) part of the mpv
        documentation for more information about commands.

        Some example commands include `seek {seconds}` and `quit`.

:MpvSetProperty {property-name} {property-value}        *MpvSetProperty*

        Set a property on the mpv instance running on the current line. See
        [this](https://mpv.io/manual/stable/#property-list) part of the mpv
        documentation for more information about properties.

        {property-value} is evaluated to its JSON value prior to being
        reserialized and sent to mpv. For example, the literal `60` will send
        a number, while `"60"` and `foo` will send strings.

        Some useful example properties:

        `volume`:               Percentage volume, ranging from 0-100.
        `loop`:                 Number of times the content should loop. Valid
                              values include numbers, `"none"`, and `"inf"`.
        `playback-time`:        Current playback position. You can change this
                              relatively using the `seek` command.

        This command is equivalent to using MpvSend with first argument
        `set_property`.

:MpvGetProperty {property-name}                         *MpvGetProperty*

        Get a property of the mpv instance running on the current line. The
        result will be displayed as if the `echo` command had been used.

        See [this](https://mpv.io/manual/stable/#property-list) part of
        the mpv documentation for more information about properties.

        This command is NOT equivalent to using MpvSend with first argument
        `get_property`. In this command, the response from mpv is not ignored.

:MpvYoutubeSearch {query}                               *MpvYoutubeSearch*

        Do a YouTube search for {query}, then open a split containing the
        results. See |neovimpv-youtube-splits| for info.

:MpvLogLevel {logger} {level}                           *MpvLogLevel*

        Set the logging level for a Python logger.
        {logger} should be one of `mpv`, `protocol`, `youtube`, or `all`.
        {level} should be a valid Python `logging` level

--------------------------------------------------------------------------------
KEYS                                                    *neovimpv-keys*

<Plug>(mpv_omnikey)

        Capture a keypress and send it to the mpv instance running on the
        current line. If there is no instance, |g:mpv_omni_open_new_if_empty|
        decides whether or not to call |:MpvOpen| or report an error. Can be
        used in visual mode to open a playlist.

        The special key specified by |g:mpv_playlist_key| will NOT be sent to
        mpv, and instead sets the current playlist item to the one on the line
        of the cursor.

        Giving a count beforehand will be acknowledged, with the key repeatedly
        sent to mpv that number of times.

<Plug>(mpv_youtube_prompt)

        Open a prompt for a YouTube search. This is equivalent to using the
        command |:MpvYoutubeSearch| with the on the contents of the prompt.
        See also |neovimpv-youtube-splits|

<Plug>(mpv_goto_earlier)

        Jump to the latest line before the cursor in the current buffer which
        has an mpv instance.

<Plug>(mpv_goto_later)

        Jump to the earliest line after the cursor in the current buffer which
        has an mpv instance.

--------------------------------------------------------------------------------
YOUTUBE RESULTS                                         *neovimpv-youtube-splits*

While searching for content on youtube with 'ytdl://ytsearch:' is possible, the
results you get are more or less a guessing game. Worse still, getting video
attributes (like description, title, view count) with `youtube-dl` (and its
forks) is generally very slow with multiple prompts.

To alleviate these problems, the plugin includes YouTube searching built-in.
The command |:MpvYoutubeSearch| and the key `<Plug>(mpv_youtube_prompt)` allow
you to open a split which contains the results of a YouTube search.

The name of the YouTube video is displayed on each line, with additional video
information available by moving the cursor to that line.

YouTube results requires `lxml` to be available to Python. Videos cannot be
played if `youtube-dl` or a replacement is not available to mpv.

                                                        *neovimpv-youtube-keys*
The keys available in YouTube splits are:

<enter>                 Copy the video URL into the buffer the split was
                        originally opened from and open the video using
                        |:MpvOpen|.

<s-enter>, v            Same as <enter>, but calls |:MpvOpen| with
                        `--video=auto` instead, which opens the result with
                        video rather than audio only.

{yank-motion}           If the yank motion is "y" (i.e., the whole line), then
                        the URL of the result under the cursor is pasted into
                        the register that was used.

                        For example, to copy the result into the system
                        clipboard, using `"+yy` will grab the URL, rather than
                        the line content.

p, P                    Same as <enter>, but works as though
                        |g:mpv_on_playlist_update| was set to "paste", which
                        pastes playlists into the buffer.
                        <P> opens the results with video.

n, N                    Same as <enter>, but works as though
                        |g:mpv_on_playlist_update| was set to "new", which opens
                        a new buffer for the playlist contents.
                        <N> opens the results with video.

i                       Download the thumbnail of the video and display it with
                        the default system viewer.

q                       Exit the split.

--------------------------------------------------------------------------------
FUNCTIONS                                               *neovimpv-function*

MpvSendNvimKeys({extmark_id}, {keypress_string})        *MpvSendNvimKeys()*

        Send {keypress_string}, a string signifying a nvim keypress event, to
        the mpv instance identified by {extmark_id}.

        The plugin is able to translate SOME of these into mpv equivalents,
        but not all. You should not rely on proper handling of modifier keys
        (Ctrl, Alt, Shift, Super).

MpvUpdatePlaylists({updated_playlists})                 *MpvUpdatePlaylists()*

        Update player's playlists on the Python side. {updated_playlists} is a
        dictionary where the keys are playlist ids and values are a list of
        playlist items. This function does NOT change extmarks, but it will
        modify the mpv playlist.

--------------------------------------------------------------------------------
CONFIGURATION                                           *neovimpv-configuration*

The following global variables may be placed in your vim init script. If they
are changed while neovim is running, they will NOT take effect.

g:mpv_loading                                           *g:mpv_loading*

        String to be displayed while an mpv instance is still loading.
        The default value is `"[ ... ]"`, displayed with highlight `MpvDefault`.

g:mpv_format                                            *g:mpv_format*

        Format string to use when drawing text for an mpv instance. Each
        field which is intended to represent an mpv property must be
        surrounded by curly braces ({}).

        Some formats are drawn internally to the plugin:
            `duration` and `playback-time` will both render in a familiar time
            format, and will be |highlight|ed as `"Conceal"` by default.

            `pause` will render using typical pause and play symbols, instead of
            the string representations "True" and "False". It also uses the
            |highlight|s `"Conceal"` and `"Title"` when `True` and `False`,
            respectively.

        The default value is `"[ {pause} {playback-time} / {duration} {loop} ]"`

g:mpv_style                                             *g:mpv_style*

        Style to use when drawing pictographic fields. Possible values are
        `"unicode"`, `"ligature"`, and `"emoji"`.

        Currently, the only pictographic field is "pause".

        The default value is `"unicode"`

g:mpv_markdown_writable                                 *g:mpv_markdown_writable*

        List of |filetype|s which, when a line is opened using |:MpvOpen|,
        will format the line into markdown, if it isn't already. The format
        used is `[{mpv-title}]({original-link})`.

        This option is best used in files which support syntax that conceals
        link contents.

g:mpv_default_args                                      *g:mpv_default_args*

        List of arguments to be supplied to mpv when an instance is opened
        with |:MpvOpen|. Note that `--no-video` is always implied, unless it
        is overridden by `--video=auto`.

g:mpv_property_thresholds                               *g:mpv_property_thresholds*

        Dictionary where the keys are mpv properties. The values are lists of
        numbers which control which highlight will be used when rendering the
        property.

        If the list contains one entry, the highlight is partitioned into "Low"
        and "High", which are appended to the usual name (e.g., "MpvPlaybackTime"
        becomes "MpvPlaybackTimeLow" and "...High"). Values less than the entry
        are given "Low" while values greater than it are given "High".

        If the list contains two entries, the value is partitioned into "Low",
        "Middle", and "High" instead.

g:mpv_draw_playlist_extmarks                            *g:mpv_draw_playlist_extmarks*

        String which is either `"always"`, `"multiple"`, or `"never"`.
        Controls whether playlist extmarks are drawn in the sign column.
        The default value is `"multiple"`.

        For `"always"`, signs will be drawn regardless of playlist length.
        For `"multiple"`, signs will not be drawn if there is only one playlist
        item.
        For `"never"`, signs will never be drawn.

g:mpv_on_playlist_update                                *g:mpv_on_playlist_update*

        String which is either `"stay"`, `"paste"`, `"paste_one"`, or
        `"new_one"`. Controls what happens when mpv dynamically loads a
        playlist.
        The default value is `"stay"`.

        For `"stay"`, the playlist "file" will be retained in the buffer and
        the tile of the current file will be drawn in an extmark below.
        For `"paste"`, the dynamic content is inserted in place of the playlist
        "file". All items in the playlist are queued and displayed in the
        buffer.
        For `"paste_one"`, the plugin behaves in `"paste"` mode when the
        initial playlist has only one item. Otherwise, it behaves in `"paste"`
        mode.
        For `"new_one"`, a single-item playlist will paste the dynamic content
        in a new split. All content is queued and the player is moved to the
        new buffer.

g:mpv_playlist_key                                      *g:mpv_playlist_key*

        A special key (stored in a string) which changes the functionality of
        the omnikey. When waiting for a keypress to send to mpv, if this key
        is pressed, the key will NOT be sent, and instead scrolls the current
        mpv item to the one at the row of the cursor.
        The default value is backslash (i.e., `"\\"`).

g:mpv_smart_youtube_playlist                            *g:mpv_smart_youtube_playlist*

        A boolean value which affects the |g:mpv_on_playlist_update| semantics
        for opening a single YouTube playlist.
        Playlists from "ytsearch[{count}]:" will open as `stay` if {count} is
        not given or 1.
        Other single-item playlists are opened as `new_one`.

--------------------------------------------------------------------------------
HIGHLIGHTS                                              *neovimpv-highlights*

General-purpose highlight groups defined by this plugin are `MpvDefault` and
`MpvPlaylistSign`. The former is, as its name suggests, the default choice
for extmarks in the plugin. The latter is the default choice for playlist
extmarks in the sign column.

The highlight used to draw an mpv property is user-controllable. All
highlights begin with "Mpv", followed by the property name. Properties in mpv
are given in kebab-case, but the corresponding highlights in Vim will be in
CamelCase. For example, the property "playback-time" becomes the highlight
"MpvPlaybackTime".

All properties which occur in `g:mpv_format` are given highlights that link
to bound to the plugin default highlight `MpvDefault`, unless they have
already been defaulted in the plugin. The following defaults additional
defaults exist:

- MpvPauseTrue -> Conceal
- MpvPauseFalse -> Title
- MpvPlaybackTime -> Conceal
- MpvDuration -> Conceal

When using |g:mpv_property_thresholds|, the original highlight for the
property will not be used. Instead, only the partitioned highlights will exist
(with defaults appropriately defined).

For example, the following will cause the first 10 seconds of playback time to
be drawn with the highlight "ErrorMsg", while the remaining time will be drawn
with "MpvDefault" (instead of "MpvPlaybackTime"):

  `let g:mpv_property_thresholds = { "playback-time": [10] }`
  `hi! link MpvPlaybackTimeLow ErrorMsg`

The following highlights are used for extra video info in YouTube results:

| PROPERTY NAME | HIGHLIGHT NAME        | EXPLANATION
_______________________________________________________________________
| length        | MpvYoutubeLength      | Length of the video
| channel_name  | MpvYoutubeChannelName | Channel name of uploader
| views         | MpvYoutubeViews       | View count of the video

================================================================================
vim:tw=80:nosta:ft=help:fen:
